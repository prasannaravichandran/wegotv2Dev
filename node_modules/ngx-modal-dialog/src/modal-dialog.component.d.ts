import { ComponentRef, ComponentFactoryResolver, ViewContainerRef, OnDestroy } from '@angular/core';
import { IModalDialog, IModalDialogOptions, IModalDialogButton, IModalDialogSettings, ModalDialogOnAction } from './modal-dialog.interface';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromPromise';
/**
 * Modal dialog component
 * Usage:
 *
 * Model properties are:
 *
 */
export declare class ModalDialogComponent implements IModalDialog, OnDestroy {
    private componentFactoryResolver;
    dynamicComponentTarget: ViewContainerRef;
    reference: ComponentRef<IModalDialog>;
    /** Modal dialog style settings */
    settings: IModalDialogSettings;
    actionButtons: IModalDialogButton[];
    title: string;
    onClose: () => Promise<any> | Observable<any> | boolean;
    showAlert: boolean;
    private _inProgress;
    private _alertTimeout;
    private _childInstance;
    private _closeDialog$;
    /**
     * CTOR
     * @param componentFactoryResolver
     */
    constructor(componentFactoryResolver: ComponentFactoryResolver);
    /**
     * Initialize dialog with reference to instance and options
     * @param reference
     * @param options
     */
    dialogInit(reference: ComponentRef<IModalDialog>, options?: IModalDialogOptions): void;
    /**
     * Run action defined on action button
     * @param action
     */
    doAction(action?: ModalDialogOnAction): void;
    /**
     * Method to run on close
     * if action buttons are defined, it will not close
     */
    close(): void;
    /**
     * Cleanup on destroy
     */
    ngOnDestroy(): void;
    /**
     * Pass options from dialog setup to component
     * @param  {IModalDialogOptions} options?
     */
    private _setOptions(options?);
    /**
     * Close if successful
     * @param callback
     */
    private _closeIfSuccessful(callback);
    private _finalizeAndDestroy();
    private _triggerAlert();
}
