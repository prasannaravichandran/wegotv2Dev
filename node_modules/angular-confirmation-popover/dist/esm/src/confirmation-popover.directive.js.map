{"version":3,"sources":["../../../src/confirmation-popover.directive.ts"],"names":[],"mappings":"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","file":"confirmation-popover.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider,\n  ComponentFactoryResolver,\n  Renderer2,\n  TemplateRef,\n  ComponentFactory,\n  SimpleChanges\n} from '@angular/core';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\nimport { Positioning } from 'positioning';\n\n/**\n * @private\n */\nexport interface ConfirmCancelEvent {\n  clickEvent: MouseEvent;\n}\n\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```html\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [title]=\"title\"\n *  [message]=\"message\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\n\nexport class ConfirmationPopoverDirective\n  implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The title of the popover.\n   * Deprecated, will be removed in v4 - use popoverTitle instead\n   */\n   title: string;\n\n  /**\n   * The title of the popover\n   */\n   popoverTitle: string;\n\n  /**\n   * The body text of the popover.\n   * Deprecated, will be removed in v4 - use popoverMessage instead\n   */\n   message: string;\n\n  /**\n   * The body text of the popover.\n   */\n   popoverMessage: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n   confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n   cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n   placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n   confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n   cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n   focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n   hideConfirmButton: boolean;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n   hideCancelButton: boolean;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n   isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n   isOpen: boolean = false;\n\n  /**\n   * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:\n   * ```html\n   * <ng-template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </ng-template>\n   * ```\n   *\n   * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n   */\n   customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n   isOpenChange: EventEmitter<boolean> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n   confirm: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n   cancel: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n   popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n   appendToBody: boolean;\n\n  /**\n   * @private\n   */\n  popover: ComponentRef<ConfirmationPopoverWindowComponent>;\n\n  /**\n   * @private\n   */\n  eventListeners: Array<() => void> = [];\n\n  /**\n   * @private\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmationPopoverOptions,\n    private cfr: ComponentFactoryResolver,\n    private position: Positioning,\n    private renderer: Renderer2\n  ) {}\n\n  /**\n   * @private\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @private\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  ngOnDestroy() {\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onConfirm(event: ConfirmCancelEvent) {\n    this.confirm.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onCancel(event: ConfirmCancelEvent) {\n    this.cancel.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  \n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  private onDocumentClick(event: Event): void {\n    if (\n      this.popover &&\n      !this.elm.nativeElement.contains(event.target) &&\n      !this.popover.location.nativeElement.contains(event.target)\n    ) {\n      this.hidePopover();\n    }\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n      // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n      // otherwise the document click event gets fired after the click event\n      // that triggered the popover to open (no idea why this is so)\n      setTimeout(() => {\n        this.eventListeners = [\n          this.renderer.listen('document', 'click', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('document', 'touchend', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('window', 'resize', () => this.positionPopover())\n        ];\n      });\n\n      const options = new ConfirmationPopoverWindowOptions();\n      Object.assign(options, this.defaultOptions, {\n        title: this.popoverTitle || this.title,\n        message: this.popoverMessage || this.message,\n        onConfirm: (event: ConfirmCancelEvent): void => {\n          this.onConfirm(event);\n        },\n        onCancel: (event: ConfirmCancelEvent): void => {\n          this.onCancel(event);\n        },\n        onAfterViewInit: (): void => {\n          this.positionPopover();\n        }\n      });\n\n      const optionalParams: Array<keyof ConfirmationPopoverDirective> = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate'\n      ];\n      optionalParams.forEach(param => {\n        if (typeof this[param] !== 'undefined') {\n          (options as any)[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<\n        ConfirmationPopoverWindowComponent\n      > = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n      const binding: ResolvedReflectiveProvider[] = ReflectiveInjector.resolve([\n        {\n          provide: ConfirmationPopoverWindowOptions,\n          useValue: options\n        }\n      ]);\n      const contextInjector = this.viewContainerRef.parentInjector;\n      const childInjector = ReflectiveInjector.fromResolvedProviders(\n        binding,\n        contextInjector\n      );\n      this.popover = this.viewContainerRef.createComponent(\n        componentFactory,\n        this.viewContainerRef.length,\n        childInjector\n      );\n      if (options.appendToBody) {\n        document.body.appendChild(this.popover.location.nativeElement);\n      }\n      this.isOpenChange.emit(true);\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement = this.popover.location.nativeElement.children[0];\n      const popoverPosition = this.position.positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n      this.renderer.setStyle(popoverElement, 'top', `${popoverPosition.top}px`);\n      this.renderer.setStyle(\n        popoverElement,\n        'left',\n        `${popoverPosition.left}px`\n      );\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      delete this.popover;\n      this.isOpenChange.emit(false);\n      this.eventListeners.forEach(fn => fn());\n      this.eventListeners = [];\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlConfirmationPopover]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ConfirmationPopoverOptions, },\n{type: ComponentFactoryResolver, },\n{type: Positioning, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'popoverTitle': [{ type: Input },],\n'message': [{ type: Input },],\n'popoverMessage': [{ type: Input },],\n'confirmText': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'placement': [{ type: Input },],\n'confirmButtonType': [{ type: Input },],\n'cancelButtonType': [{ type: Input },],\n'focusButton': [{ type: Input },],\n'hideConfirmButton': [{ type: Input },],\n'hideCancelButton': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'customTemplate': [{ type: Input },],\n'isOpenChange': [{ type: Output },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'popoverClass': [{ type: Input },],\n'appendToBody': [{ type: Input },],\n'togglePopover': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}